#!/bin/bash
# yadm bootstrap script for a new machine

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to detect if the system is macOS
is_mac() {
    [[ "$(uname)" == "Darwin" ]]
}

# Function to detect if the system is Linux
is_linux() {
    [[ "$(uname)" == "Linux" ]]
}

# Function to detect macOS on Intel
is_mac_intel() {
    is_mac && [[ "$(uname -m)" == "x86_64" ]]
}

# Function to detect macOS on Apple Silicon
is_mac_apple_silicon() {
    is_mac && [[ "$(uname -m)" == "arm64" ]]
}

# Function to detect Linux on x86_64
is_linux_x86_64() {
    is_linux && [[ "$(uname -m)" == "x86_64" ]]
}

# Function to detect Linux on arm64
is_linux_arm64() {
    is_linux && [[ "$(uname -m)" == "aarch64" ]]
}

# Function to install a font (for ubuntu)
install_font() {
    FONT_DIR="/usr/local/share/fonts"
    if [ ! -f "$FONT_DIR/$1-Regular.ttf" ]; then
        echo "[BOOTSTRAP] Installing font: $1"
        mkdir -p "$HOME/tmp"
        curl -L -o "$HOME/tmp/$1.zip" "https://github.com/ryanoasis/nerd-fonts/releases/download/v3.2.1/$1.zip"
        sudo unzip "$HOME/tmp/$1.zip" -d "$FONT_DIR"
        rm "$HOME/tmp/$1.zip"
    else
        echo "[BOOTSTRAP] Font $1 already installed"
    fi
}

# Check for the operating system
if is_mac; then
    echo "[BOOTSTRAP] macOS detected."

    # Check for Xcode CLI tools and install if not present
    if ! xcode-select -p &> /dev/null; then
        echo "[BOOTSTRAP] Installing Xcode Command Line Tools"
        xcode-select --install
        # Wait for the installation to complete
        until xcode-select -p &> /dev/null; do
            sleep 5
        done
    else
        echo "[BOOTSTRAP] Xcode Command Line Tools already installed"
    fi

    # Install Homebrew if needed
    if ! command_exists brew; then
        echo "[BOOTSTRAP] Installing Homebrew"
        bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    else
        echo "[BOOTSTRAP] Homebrew already installed"
    fi
    
    # Install brew packages
    if command_exists brew; then
        echo "[BOOTSTRAP] Installing/Updating packages"
        brew update
        brew install \
            bat \
            eza \
            fd \
            fzf \
            gdu \
            git \
            htop \
            jless \
            jq \
            lua \
            luarocks \
            mise \
            neovim \
            openssl \
            pipx \
            ripgrep \
            starship \
            tmux

        # Install fonts
        echo "[BOOTSTRAP] Installing fonts in casks"
        # brew tap homebrew/cask-fonts
        brew install --cask \
            font-fira-code-nerd-font \
            font-jetbrains-mono-nerd-font

        echo "[BOOTSTRAP] Installing GUI apps in casks"
        brew install --cask \
            1password-cli \
            alacritty \
            tailscale \
            wezterm

    else
        echo "[BOOTSTRAP] Homebrew installation failed."
        exit 1
    fi

elif is_linux && command_exists apt; then
    echo "[BOOTSTRAP] Apt-based system detected (Ubuntu optimized). Using apt."

    # Install apt packages
    sudo apt update
    sudo apt install -y \
        bat \
        curl \
        eza \
        fd-find \
        gcc \
        gdu \
        git \
        gpg \
        htop \
        jq \
        lua \
        luarocks \
        neovim \
        pipx \
        ripgrep \
        tailscale \
        tmux

    # Check for GUI
    if xset q &>/dev/null; then
        echo "[BOOTSTRAP] GUI detected. Installing gui apps."

        # Install fonts
        echo "[BOOTSTRAP] Installing fonts"
        install_font "FiraCode"
        install_font "JetBrainsMono"

        # Install WezTerm
        if ! command_exists wezterm; then
            echo "[BOOTSTRAP] Installing WezTerm"
            curl -fsSL https://apt.fury.io/wez/gpg.key | sudo gpg --yes --dearmor -o /usr/share/keyrings/wezterm-fury.gpg
            echo 'deb [signed-by=/usr/share/keyrings/wezterm-fury.gpg] https://apt.fury.io/wez/ * *' | sudo tee /etc/apt/sources.list.d/wezterm.list
            sudo apt update
            sudo apt install -y wezterm
        fi

        echo "[BOOTSTRAP] Manually install:"
        echo "  - brave browser"
        echo "  - 1password extension"
        echo "  - raindrop extension"
    fi
else
    echo "[BOOTSTRAP] Neither macOS nor APT-based Linux detected. Please install one of them first."
    exit 1
fi

# Common Setup

# Install mise
if ! command_exists mise; then
    if is_mac; then
        echo "[BOOTSTRAP] Installing mise for Mac"
        brew install mise
    elif is_linux; then
        echo "[BOOTSTRAP] Installing mise for Linux"
        mkdir -p ~/bin
        if is_linux_x86_64; then
            echo "[BOOTSTRAP] Downloading mise for Linux x64"
            curl -fsSL https://mise.jdx.dev/mise-latest-linux-x64 > ~/bin/mise
        elif is_linux_arm64; then
            echo "[BOOTSTRAP] Downloading mise for Linux arm64"
            curl -fsSL https://mise.jdx.dev/mise-latest-linux-arm64 > ~/bin/mise
        else
            echo "[BOOTSTRAP] ERROR - Unsupported Linux architecture for mise installation"
            exit 1
        fi
        chmod +x ~/bin/mise
        mise self-update
        
   else
        echo "[BOOTSTRAP] ERROR - Cannot install mise. Unsupported system."
        exit 1
    fi
else
    echo "[BOOTSTRAP] mise already installed"
fi

if command_exists mise; then
    # Set up python with mise
    echo "[BOOTSTRAP] Setting up python with mise"
    mise use --global python@3.11.9

    if is_linux; then
        # Install additional packages with mise on Linux only
        echo "[BOOTSTRAP] Installing additional packages with mise"
        mise use --global jless@latest
        mise use --global starship@latest
        mise use --global fzf@latest

        # Activate the installed tools
        # mise activate
    fi
else
    echo "[BOOTSTRAP] ERROR - mise installation failed"
    exit 1
fi

if command_exists pipx; then
    # Install Python apps
    echo "[BOOTSTRAP] Installing Python apps with pipx"
    pipx install \
        tldr \
        ruff \
        httpie \
        pytube \
        llm \
        visidata
else
    echo "[BOOTSTRAP] ERROR - pipx is missing"
fi


# Clone tpm if not already present
if [ ! -d "$HOME/.tmux/plugins/tpm" ]; then
    echo "[BOOTSTRAP] Cloning tpm"
    git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
fi

echo "[BOOTSTRAP] Setup is complete."
echo "[BOOTSTRAP] You may need to run 'chsh' to change your shell to /usr/bin/zsh."
echo "[BOOTSTRAP] Remember to install tpm plugins in tmux <leader>I"
echo "[BOOTSTRAP] Please log out and log back in using zsh."
